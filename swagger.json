{
  "openapi": "3.0.1",
  "info": {
    "title": "Water tracker API docs ðŸ’§",
    "description": "ðŸ’¦ The API for the Water tracker project ðŸ’¦",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://water-tracker-backend-0wax.onrender.com/api"
    },
    {
      "url": "http://localhost:5001/api"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User info",
      "description": "User information endpoints"
    },
    {
      "name": "Water",
      "description": "Water endpoints"
    }
  ],
  "paths": {
    "/user/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user.",
        "requestBody": {
          "description": "Registration's object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationLoginScheme"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationLoginInvalideErrore"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationError"
                }
              }
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login user.",
        "requestBody": {
          "description": "Registration's object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationLoginScheme"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationLoginInvalideErrore"
                }
              }
            }
          },
          "401": {
            "description": "Email or password is wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginError"
                }
              }
            }
          }
        }
      }
    },
    "/user/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logout user.",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "User's token",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized - Invalid or empty access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotAuthError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/": {
      "get": {
        "tags": ["User info"],
        "summary": "Get user information.",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "User's token",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or empty access token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotAuthError" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundError" }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/update": {
      "patch": {
        "tags": ["User info"],
        "summary": "Update user information.",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "User's token",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or empty access token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotAuthError" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundError" }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/avatar": {
      "patch": {
        "tags": ["User info"],
        "summary": "Update user avatar.",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "User's token",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or empty access token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotAuthError" }
              }
            }
          },
          "400": {
            "description": "File upload error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundError" }
              }
            }
          }
        },
        "404": {
          "description": "User not found",
          "content": {
            "application/json": {
              "schema": {},
              "example": {
                "message": "User not found"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/dailyNorma": {
      "patch": {
        "tags": ["User info"],
        "summary": "Update user daily norma.",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "User's token",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or empty access token",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          },
          "400": {
            "description": "Daily norma was exceeded",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotAuthError" },
                "example": {
                  "message": "dailyNorma cannot exceed 15"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundError" },
                "example": {
                  "message": "User not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/water/": {
      "post": {
        "tags": ["Water"],
        "summary": "Add portion of water.",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "User's token",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "description": "Add water object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddWaterScheme"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddWaterSchemeResnonse"
                }
              }
            }
          },
          "400": {
            "description": "waterAmount cannot exceed 5000",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceedWaterError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or empty access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotAuthError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/water//update/:id": {
      "put": {
        "tags": ["Water"],
        "summary": "Update portion of water.",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "User's token",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "description": "Update water object",
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "waterAmount cannot exceed 5000",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceedWaterError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or empty access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotAuthError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/water/:waterId": {
      "delete": {
        "tags": ["Water"],
        "summary": "Delete portion of water.",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "User's token",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteWaterResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or empty access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotAuthError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/water/today": {
      "get": {
        "tags": ["Water"],
        "summary": "Water consumption during the day.",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Date",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {}
          },
          {
            "name": "token",
            "in": "header",
            "description": "User's token",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWaterTodayResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or empty access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotAuthError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/water/month": {
      "get": {
        "tags": ["Water"],
        "summary": "Water consumption during the month.",
        "parameters": [
          {
            "name": "year",
            "in": "query",
            "description": "Year",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {}
          },
          {
            "name": "month",
            "in": "query",
            "description": "Month",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {}
          },
          {
            "name": "token",
            "in": "header",
            "description": "User's token",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWaterMonthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or empty access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotAuthError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationLoginScheme": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "user's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "user's password",
            "example": "password456"
          }
        }
      },
      "RegisterResponse": {
        "type": "object",
        "required": ["user"],
        "properties": {
          "user": {
            "type": "object",
            "description": "object with user's email inside",
            "properties": {
              "email": {
                "type": "string",
                "description": "user's email",
                "format": "email"
              }
            }
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "required": ["token", "user"],
        "properties": {
          "token": {
            "type": "string",
            "description": "user's token to login",
            "example": "eyJhbGciOiJIUzIwI...C-ubT80KJmsHz02M_hixwbaGlZaoe7A"
          },
          "user": {
            "type": "object",
            "description": "object with user's email inside",
            "properties": {
              "email": {
                "type": "string",
                "description": "user's email",
                "format": "email"
              }
            }
          }
        }
      },
      "RegistrationLoginInvalideErrore": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Invalid error",
            "example": "There are missing fields"
          }
        }
      },
      "RegistrationError": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Invalid error",
            "example": "Email in use"
          }
        }
      },
      "LoginError": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Invalid error",
            "example": "Email or password is wrong"
          }
        }
      },
      "NotAuthError": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Invalid error",
            "example": "Not authorized"
          }
        }
      },
      "GetUserResponse": {
        "type": "object",
        "required": [
          "_id",
          "email",
          "token",
          "avatarURL",
          "name",
          "gender",
          "dailyNorma"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "user's id",
            "example": "23h4589fk20033489d0"
          },
          "token": {
            "type": "string",
            "description": "user's token to login",
            "example": "eyJhbGciOiJIUzIwI...C-ubT80KJmsHz02M_hixwbaGlZaoe7A"
          },
          "email": {
            "type": "string",
            "description": "user's email",
            "format": "email"
          },
          "avatarURL": {
            "type": "string",
            "description": "user's avatar",
            "example": "//www.gravatar.com/avatar/fe3fb653749dac8899ba73c84ba823b8"
          },
          "name": {
            "type": "string",
            "description": "user's name",
            "example": "Ivan"
          },
          "gender": {
            "type": "string",
            "description": "user's gender",
            "example": "woman"
          },
          "dailyNorma": {
            "type": "number",
            "description": "user's water daily norm",
            "example": "1.5"
          }
        }
      },
      "NotFoundError": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Not found error",
            "example": "User not found"
          }
        }
      },
      "AddWaterScheme": {
        "type": "object",
        "required": ["date"],
        "properties": {
          "waterAmount": {
            "type": "number",
            "description": "amount of the water",
            "example": 200
          },
          "date": {
            "type": "string",
            "description": "date",
            "example": "12:30"
          }
        }
      },
      "AddWaterSchemeResnonse": {
        "type": "object",
        "required": ["waterAmount", "date", "owner", "_id"],
        "properties": {
          "waterAmount": {
            "type": "number",
            "description": "amount of the water",
            "example": 200
          },
          "date": {
            "type": "string",
            "description": "date",
            "example": "12:30"
          },
          "owner": {
            "type": "string",
            "description": "owner",
            "example": "65ba589cab96c7a17ee1cfdf"
          },
          "_id": {
            "type": "string",
            "description": "id",
            "example": "34ba589cab96c7a17ee1cfdf"
          }
        }
      },
      "DeleteWaterResponse": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Success",
            "example": "Water deleted"
          }
        }
      },
      "ExceedWaterError": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Water can not exceed error",
            "example": "Water can not exceed 5000"
          }
        }
      },
      "GetWaterTodayResponse": {
        "type": "object",
        "required": ["waterVolumeSum", "waterVolumes", "waterVolumePercentage"],
        "properties": {
          "waterVolumeSum": {
            "type": "number",
            "description": "Sum of the water",
            "example": 400
          },
          "waterVolumes": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["_id", "waterAmount", "date", "owner"],
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "id",
                  "example": "65ba589cab96c7a17ee3fd"
                },
                "waterAmount": {
                  "type": "number",
                  "description": "amount of the water",
                  "example": 350
                },
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "description": "date of creation",
                  "example": "2024-01-31T12:30:02.593Z"
                },
                "owner": {
                  "type": "string",
                  "description": "owner of the water response",
                  "example": "23fa589cab96c7a17ee3fd"
                }
              }
            }
          }
        }
      },
      "GetWaterMonthResponse": {
        "type": "object",
        "required": ["2024-01-31"],
        "properties": {
          "2024-01-31": {
            "type": "object",
            "required": [
              "waterVolumes",
              "date",
              "waterVolumeTimes",
              "waterVolumePercentage",
              "dailyNorma"
            ],
            "properties": {
              "waterVolumes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["_id", "waterAmount", "date", "owner"],
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "id",
                      "example": "65ba589cab96c7a17ee3fd"
                    },
                    "waterAmount": {
                      "type": "number",
                      "description": "amount of the water",
                      "example": 200
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time",
                      "description": "date of creation",
                      "example": "2024-01-31T12:30:02.593Z"
                    },
                    "owner": {
                      "type": "string",
                      "description": "owner of the water response",
                      "example": "65ba589cab96c7a17ee1ce16"
                    }
                  }
                }
              },
              "date": {
                "type": "string",
                "description": "formatted date",
                "example": "31, January"
              },
              "waterVolumeTimes": {
                "type": "integer",
                "description": "number of water volume times",
                "example": 1
              },
              "waterVolumePercentage": {
                "type": "integer",
                "description": "water volume percentage",
                "example": 13
              },
              "dailyNorma": {
                "type": "number",
                "description": "user's water daily norm",
                "example": 1.5
              }
            }
          }
        }
      }
    }
  },
  "securitySchemes": {
    "bearerAuth": {
      "type": "http",
      "scheme": "bearer",
      "bearerFormat": "JWT"
    }
  }
}
